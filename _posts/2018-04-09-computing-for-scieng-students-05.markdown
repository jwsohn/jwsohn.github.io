---
layout: post
title:  "이공계 대학생/대학원생을 위한 컴퓨팅 강좌 5:"
date:   2018-04-09 22:30:00 -0500
published: no
categories: 강좌
---

# 이공계 대학생/대학원생을 위한 컴퓨팅 강좌 5: 컴퓨터 언어 선택

안녕하세요. @jwsohn입니다. 오늘 포스팅에서는 어떤 컴퓨터 언어를 배우는 것이
좋은지에 대해서 제 개인적인 의견을 정리해 보도록 하겠습니다.

## 어떤 컴퓨터 언어를 배우는 것이 좋은가? 

컴퓨터 언어는 크게 보면 도구(tool)이라고 볼 수 있을 겁니다. 컴퓨터로 어떤
작업을 수행하는 데 그 방법을 지시해 놓은 명세서(specification)가 컴퓨터
언어이니까요. 그런 까닭에, 컴퓨터 언어를 고르기 전에 중요하게 생각해야 할 것은
컴퓨터를 쓰는 여러분들의 필요(needs)가 되겠습니다. 

### 기본은 탄탄히
 
프로그래밍 혹은 코딩 작업은 컴퓨터를 사용하는 작업입니다. 따라서, 코딩을
하려면 디지털 컴퓨터라는 기계에 대한 기본적인 이해가 있어야 할 것이고,
일반적인 컴퓨터 언어의 설계와 자주 쓰이는 기법에 대해서도 이해가 있어야 할
것입니다.

그런데, 자신의 필요에 따라 코딩을 하는 분들은 컴퓨터 언어에 대한 이해도가 낮은
경우가 많습니다. 이런 경우는 한번쓰고 재활용이 쉽지 않은 코드가 나오기
쉽습니다. 

그래서 어떤 컴퓨터 언어를 배우는 것이 좋은가 하는 질문은 접근을 조금 다르게 할
필요가 있다고 생각합니다. 사용자의 필요에 따라 어떤 언어를 배우든 간에, 컴퓨터
프로그래밍에 대한 기본적인 지식은 그 이전에 반드시 습득해야 하니까요. 

그런 까닭으로, 대학 교과 과정으로 생각하자면 컴퓨터 공학 비전공자라도 **자료
구조론(data structure)**은 확실히 배우는 것이 좋다고 생각합니다.

### 자료구조론 학습을 위한 컴퓨터 언어

그러면 프로그래밍의 기초를 다지기 위한 컴퓨터 언어는 어떻게 선택하는 게
좋을까요? 자료구조론을 배우기 좋은 언어는 특별한 것은 없습니다. 다만, 2018년
현재로서는 Java나 Python을 추천하고 싶은데 이 중에서 특히 자료구조만을
놓고 보면 Java를 좀 더 추천하고 싶습니다.

왜냐하면 Java는 Python에 비해서 언어가 저수준(low-level)입니다. Java는
Python과는 달리 리스트(List), 해쉬(Hash) 같은 고차원적인 자료 구조가 언어
자체에 내장되어 있지 않습니다. 물론, Java의 경우 기본적으로 따라오는 JDK의
Collection API가 이 부분을 잘 해결해주고 있습니다만 이것은 언어를 배우고 난 뒤
JDK API를 좀 더 공부해야 알 수 있는 것이죠.

따라서, 아주 기본적인 기법만을 이용해서 프로그래밍 기법, 특히 dynamic memory
allocation의 개념을 확실히 습득하기 위해서는 배운다는 측면에서  Python보다 좀
더 신경 쓸 일이 많은 Java를 쓰는 것이 더 좋다고 봅니다.

그러면 이왕 저수준으로 가는 김에 C나 C++도 생각해 볼 수 있겠습니다만 요즈음은
그 정도까지 갈 필요는 없다고 생각합니다. C의 경우는 언어 구조가 간단하면서도
강력하지만 객체지향 프로그래밍 (object oriented programming) 개념을 습득하기가
어려울 수가 있습니다. C++는 모든 기능을 다 갖추고 있는 좋은 언어이지만 반대로
배우기가 어렵고 Java의 JDK와는 달리 기본적으로 따라오는 좋은 API가 없습니다.
이런 면에서는 C나 C++에 비해 Java가 언어 습득의 용이성이나 실용성의 측면에서 
낫다고 생각합니다.

## 사용자의 필요를 생각해보자

이제 기본을 다졌으니 그 다음으로 사용자의 필요(needs)를 생각해 보겠습니다.
여기서부터는 여러분들의 선택이 갈릴 수 있겠습니다. 필요에 따라 적절한 도구를
쓰는 것이 좋을테니까요. 일단 이 글이 이공계 대학생/대학원생을 대상으로 하고
있으니 해결해야 할 문제에 따라 구분을 해 보도록 하겠습니다.

### 컴퓨터로 데이터 처리하기: Big Data

최근의 컴퓨팅의 가장 큰 동향은 소위 AI가 유행하면서 기계 학습(Machine
Learning)분야의 중요성이 강조되고 있다는 점입니다. 기계 학습을 배우기 위해서는
무엇이 중요할까요? 통계학(statistics)이 중요합니다. 기계 학습 이론의
상당부분이 확률/통계 이론에 바탕을 두고 있기 때문입니다. 그래서 소위 빅 데이터
처리에 관심이 있으신 분들은 이제는 통계학을 열심히 해야 하시겠습니다. 

컴퓨터 언어로 데이터를 처리하려면 또 어떤 기능이 필요할까요? 데이터라는 것은
사람 눈으로 읽어내는 데 한계가 있습니다. 그런 까닭에 평균이나 표준편차같은
대표값도 구해보고, 히스토그램 같은 그래프도 그려보게 되는 것이죠.

이렇게 데이터 분석, 혹은 data visualization에 뛰어난 언어로는 Python
(matplotlib), Matlab, R 등을 추천합니다. 여기서 범용성으로는 Python이 가장
우수하고 Matlab이나 R은 data visualization 쪽으로 좀 더 유리합니다. 다만, 범용
어플리케이션을 개발하는 목적으로 Matlab이나 R은 적합하지 않을 수도 있습니다.

또한 기계 학습 라이브러리는 

### 웹 어플리케이션 개발:

### 모바일 앱 개발:

### 게임 개발:


### 컴퓨터로 계산하기: 수치해석 (Numerical analysis)

컴퓨터로 계산을 해야 하는 경우입니다. 그렇다면 계산 속도가 빠르고
행렬(matrix) 연산이 쉬운 언어를 쓰는 것이 좋겠습니다. 쓰기 쉽고 속도가 빠른
Matlab이나 Python(Numpy, Matplotlib)을 추천합니다. 

참고로 기계공학과의 문제 중에서 빠른 CPU 속도와 대량의 Memory를 필요로 하는
경우가 있습니다. 이런 경우는 어쩔 수 없이 속도가 빠른 언어를 써야 하는데요.
C나 C++, 심지어는 Fortran까지 쓰는 경우도 있습니다. 그런데 의외로 Fortran이
언어가 간단하며 계산이 빠르고 정확하다는 장점이 있으니 혹시 대학원 과정에서
Fortran을 다루어야 하는 상황이 전개된다면 부담갖지 마시고 써 보시길
추천합니다.

수치해석쪽 코딩을 한다면 객체지향기법(object oriented programming)과 같은
개념은 그다지 중요하지 않습니다. 자료구조론까지만 열심히 하시면 된다고
생각합니다.

#### 잘 모르겠다?

Data Structure를 Java로 배우시길 추천합니다. 그 이후에는 Java를 계속 들고 파든 
Python 같은 언어로 옮겨가든 알아서 하시길.


컴퓨터 언어 선택: 전공과 비전공. 그래도 기본은 다 해야

전체적인 추세: 통계학의 중요성. Coding은 나쁘게 말하면 method 혹은 tool.

전공자: Java 추천. 여전히 Java가 필요. Python도 같이 추천. 

Java: JDK가 매우 잘 설계된 API. 이것만 잘 써도 인생이 편리함. 다만, OOP 지식
필요. Strong typed language.

비전공자: Python 추천. 기타 R이나 Matlab, Python Matplotlib (notebook, etc) 같은 것 추천.
함수형 언어 특성이 있음. map and reduce.

Python 역시 기본 API가 잘 되어 있음. Python 2와 3 사이의 호환성 문제가 여전히
남아 있음. 이제는 3 추천

Numerical analysis: Python 역시 추천. Numpy. 

## Coding style

## Programming
  * Java and JDK (well designed)
  * Python
    - matplotlib or matlab (matrix computation)
    - numpy and scipy
  * R. But not for application development.

그리고, 컴퓨터 언어에 대해 이해도가 높은 분들은 기술 결정론적(technological
determinism)에 입장에 빠지는 경우가 많습니다. 도구만 잘 만들면 문제도
해결된다는 관점인데요. 이 경우는 코드는 괜찮은데 사용자의 필요는 제대로 맞추지
못하는 경우가 자주 발생합니다. 이런 상황은 컴퓨터 공학 전공자분들에게 잘
발생하는 것 같습니다.



언어는 기본적으로는 유행하는 언어를 배우면 된다고 생각합니다. 달리
말해 사람들이 많이 쓰는 언어를 배우는 것이죠. 

사람들이 많이 쓰는 언어일수록 언어에 대한 자료도 잘 되어 있습니다. 

사람들이 많이 쓰는 언어일수록
API(application program interface)나 모듈(module)들이 가져다 쓰기 좋게 잘
만들어져 있고 이를 사용해서 코딩을 쉽게 하기가 용이하기 마련입니다.
개인적으로는 Java나 Python을 기본으로서 추천합니다.
